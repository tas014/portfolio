{
  "title": "App de Energía",
  "description": "Este es un proyecto real que realicé para Edesur, una empresa de distribución eléctrica argentina. El proyecto surgió porque un conocido que trabaja en la empresa desarrolló un software para realizar estos cálculos con Visual Basic, pero por alguna razón no pudo ejecutarlo en las computadoras de sus compañeros. Además, procesaba los datos de forma bastante lenta, llegando a tardar hasta media hora en ocasiones. La necesidad de distribuir este software era imperativa, ya que la empresa contaba con un departamento entero que realizaba estos cálculos a la vieja escuela, lo que generaba muchos errores humanos y retrasos en la entrega de informes, y por lo tanto acarreaba literalmente millones de dólares en multas. Hablamos del proyecto y, como las computadoras de la empresa no permitían instalar software, se me ocurrió crear una aplicación web que pudiera recibir los datos y procesarlos. Esto resolvería ambos problemas a la vez, ya que una aplicación web es fácilmente accesible desde cualquier navegador y yo estaba mejor capacitado para optimizar la lógica del procesamiento de datos para que fuera eficiente. Después de poco más de un mes de trabajar con un ingeniero eléctrico en este proyecto, lo pusimos en producción y... ¡La penalización del mes siguiente (y de todos los meses desde entonces) fue de cero dólares! Échale un ojo si quieres saber más sobre los desafíos que enfrenté al crear esta aplicación.",
  "route": "/projects/energy-app",
  "previewURL": "/img/cpt-ss.webp",
  "tags": ["Procesamiento de Datos", "UX | UI", "Comunicación", "Resolución de Problemas"],
  "year": 2024,
  "client": {
    "name": "Edesur",
    "description": "Edesur es una empresa de distribución eléctrica argentina. En este proyecto planifiqué, diseñé y programé una solución para el enorme problema de las multas por reportes erróneos o fuera de plazo, que le estaba costando a la empresa millones de dólares."
  },
  "objective": "Crear una aplicación que permita subir y procesar los archivos con registros de mediciones, calcular las mediciones penalizadas e imprimirlas en un archivo excel para uso por parte de los Ingenieros de Edesur.",
  "links": [
    {
      "text": "Link al sitio",
      "URL": "https://cpt-test-umber.vercel.app/"
    },
    {
      "text": "Datos para probar el sitio",
      "URL": "/EnergyAppSampleFiles.rar",
      "download": "datos-de-prueba.rar"
    }
  ],
  "software": [
    {
      "name": "React",
      "icon": "/img/react.png"
    },
    {
      "name": "Sheet.js",
      "icon": "/img/sheetjs.png"
    }
  ],
  "outcome": "El proyecto fue un éxito rotundo. Si bien hubo que apurar mucho el proceso debido a la magnitud de dinero en juego, tras un mes de constante comunicación con el equipo de Ingenieros de Edesur pudimos poner en producción el sitio, ¡y el total de multas por reportes erróneos o fuera de término del cuatrimestre fue de exactamente 0 dólares!",
  "project": {
    "title": "Energy App",
    "sections": [
      {
        "title": "El Comienzo",
        "reference": {
          "url": "/img/money-burning.gif",
          "alt": "an image of declining stock",
          "code": ""
        },
        "description": "Este proyecto surgió de la combinación de una necesidad muy específica y de una solución ya existente pero imperfecta para un problema concreto. Estaba hablando con mi padre sobre cómo le había ido el trabajo una noche, y me describió una situación muy frustrante: millones de dólares de la empresa se estaban desperdiciando debido a sanciones muy fáciles de evitar que se acumulaban. El problema principal era que no se completaban a tiempo unos reportes de energía suministrada en malas condiciones, y lo que se completaba a menudo era incorrecto. Era propenso a errores humanos dado que la empresa contaba con un equipo de unas 5 personas que calculaban todo manualmente, y esto daba lugar a sanciones por miles de informes energéticos mal calculados y mal entregados. Lo más sorprendente es que mi padre ya había pensado en una solución de software para este problema. Él y uno de los ingenieros que realizaba los cálculos manuales lograron crear un programa utilizando Power BI de Windows e incluso lo pusieron en funcionamiento. Sin embargo, esto no era tan útil como podría pensarse en un principio. Quizás te preguntes: ¿cómo es posible que este problema no se haya resuelto si ya tienen software que puede calcular perfectamente los informes? Y no te culpo por preguntartelo. Yo hice lo mismo. Resulta que, por razones que desconozco debido a secreto empresarial, el software no podía distribuirse a los ordenadores que tenían acceso a los archivos que debían procesarse (o al menos no sabían cómo distribuirlo sin romperlo). Este fue el problema que acabó convirtiéndose en mi mayor proyecto orientado a clientes hasta la fecha."
      },
      {
        "title": "Limitaciones de Software",
        "reference": {
          "url": "/img/denied.webp",
          "alt": "an image that reads denied access",
          "code": ""
        },
        "description": "Dado lo que acabamos de comentar, era muy poco probable que pudiéramos crear algún tipo de aplicación de consola para procesar los datos, ya que lo más probable era que su instalación no fuese permitida. Esto significaba que ninguna aplicación de consola o de escritorio podía considerarse un medio viable para resolver este problema, por lo que mi mente se desvió inmediatamente hacia lo que, al menos para mí, era la pregunta obvia: ¿qué tal una aplicación web? ¿Tenían los ordenadores acceso a un navegador? ¡Y la respuesta era que sí! Esto significaba que ahora teníamos un medio a través del cual podíamos procesar los datos, aunque esto provocó algunas preocupaciones iniciales sobre la seguridad y la exposición de los datos de la empresa. Si hacemos memoria, la razón por la que no sabíamos por qué no se podía difundir el software era por el secreto de la empresa. Sin embargo, resultó ser que no había ningún problema con la exposición de los archivos a partir de los cuales se calculaban los informes y, por suerte para nosotros, ¡eso era todo lo que necesitábamos! Mi padre concertó una reunión, acordamos un precio y un plazo, y me puse a trabajar."
      },
      {
        "title": "Simple pero Útil",
        "reference": {
          "url": "/img/cpt-ss.webp",
          "alt": "an image of the project's user interface",
          "code": ""
        },
        "description": "Aunque a lo largo de mi carrera he tenido materias de diseño gráfico y UX/UI, no se me da muy bien diseñar interfaces de usuario estéticamente agradables desde cero. Sin embargo, lo que sí sé hacer es crear interfaces eficaces. La apariencia es muy importante para un sitio web orientado al contenido, pero lo que se esperaba de este proyecto no era realmente una interfaz brillante y llamativa, sino más bien una interfaz de usuario sencilla y ordenada que permitiera introducir datos y descargar archivos procesados. Es evidente que esto no se venderá por millones en una exposición de arte, ¡pero sí le ha ahorrado millones de dólares a mi cliente! Hay dos secciones principales: una es para un archivo Excel que contiene los registros totales de energía de varios archivos .dat, y la otra es para los archivos .dat que contienen las lecturas detalladas del mes sobre las lecturas de energía cada 45 minutos desde que se activaron los dispositivos que las producen. En el caso de los cálculos monofásicos, se necesitan ambos, y en el caso de los cálculos trifásicos, solo se necesitan los archivos .dat (hay una pestaña para alternar entre ellos porque el cálculo real también es diferente, por lo que lo correcto era tener una pantalla separada para cada uno). No es mucho, ¡pero es trabajo honesto!"
      },
      {
        "title": "Operaciones Asíncronas e Iteración de Objetos",
        "reference": {
          "url": "/img/cpt-vid.webp",
          "alt": "a short clip showing the interface working",
          "code": ""
        },
        "description": "Aprendí mucho sobre manejo de errores, operaciones asíncronas, la interfaz del lector de archivos de Javascript y el manejo de casos borde con este proyecto. También fue la primera vez que trabajé con ingenieros fuera del campo de la informática, ¡lo cual fue muy placentero! A lo largo de varias reuniones, identifiqué lo que tenía que hacer para procesar correctamente los archivos. Algo que aprendí a lo largo de mi carrera es que prácticamente todos los programas se pueden dividir en tres partes principales: lo que el programa espera recibir como entrada, lo que se espera que el programa genere como salida y, en medio, la parte en la que se transforma lo uno en lo otro. Los comercios electrónicos esperan que los usuarios puedan introducir lo que quieren comprar y dónde quieren recibirlo, las redes sociales esperan que sus usuarios introduzcan contenido para compartir con otros usuarios, y al igual que cualquier otro programa, este también tiene un conjunto muy específico de posibles entradas y sus correspondientes salidas esperadas. Esto significa que lo primero que tenía que hacer era permitir a mis usuarios subir archivos a su navegador para que el programa pudiera manejar la lógica de procesamiento. Añadí un contenedor que permitiera a los usuarios subir archivos haciendo clic o arrastrando y soltando sobre ellos, y lo siguiente fue averiguar cómo conciliar dos tipos de formatos diferentes. La solución que elegí fue, dado que necesitaba que mi programa leyera un archivo Excel y se esperaba que generase otro una vez finalizado el procesamiento, simplemente utilizar la biblioteca sheets.js para leer todos los archivos, tanto .xls como .dat. Esto funcionó muy bien, así que ahora tenía objetos enormes con grandes cantidades de filas de datos, algunos de ellos relevantes, pero la mayoría no tanto. Esta parte va a ponerse un poco técnica, así que considerense advertidos: el problema principal era que cada objeto tenía un conjunto de claves generadas dinámicamente que debía utilizar para acceder a sus datos correspondientes, y cada clave se establecía según el primer valor de la columna. Esto significaba que cada archivo tendría miles de columnas de datos sin ningún tipo de patrón común entre los archivos. Bueno, al menos en lo que respecta a las claves de los objetos. Mi salvación fue que había algunos patrones comunes en todos los archivos: una línea en la quinta fila de cada archivo que indicaba lo que representaba cada columna. Y, por suerte para mí, esto es todo lo que un programador realmente necesita. Una vez que tenemos un patrón común entre grandes cantidades de datos, es posible, al menos parcialmente, procesarlos de manera automática. Ahora que tenía un valor de datos estático que sabía que debía buscar, podía simplemente almacenar la clave de esa columna y utilizarla dinámicamente para leer todos los valores subsecuentes. Sin embargo, el siguiente problema era que este programa también tenía que ser capaz de manejar cientos o posiblemente miles de archivos de formato .dat, cada uno con miles de lecturas internas, y esto puede llevar bastante tiempo. No menciono esto porque haya algún truco mágico que pueda hacer para que la lectura y procesado suceda de inmediato, sino para hablar de la importancia de proveer una buena experiencia de usuario frente a este período de procesamiento. Javascript es sincrónico por naturaleza, por lo que si le indicas que procese un billón de sumas consecutivas, eso es exactamente lo que hará, pero al hacerlo no permitirá a nuestros usuarios hacer nada más hasta que haya terminado. Otro factor a tener en cuenta es que la interfaz del lector de archivos de Javascript funciona de forma asincrónica, por lo que los datos del archivo ni siquiera estarían disponibles si intentasemos procesarlos en el instante en que el usuario hiciera clic en el botón para hacerlo, sino que deberíamos esperar a que los archivos sean leídos y transformados en objetos con los que mi programa pueda trabajar. Para solucionar estos problemas, implementé la precarga de los datos en el momento en que el usuario los subía al navegador haciendo click o arrastrandolos en su contenedor correspondiente, ya que, incluso si mis usuarios tuviesen mucha prisa, las centésimas de segundo que tarda el ratón en desplazarse desde el contenedor de archivos hasta el botón de procesamiento de datos son suficientes para que una computadora realice MUCHAS operaciones. De esta forma, al hacer click en el botón de comenzar a procesar, una buena parte de (si no todos) archivos ya estarían listos para ser procesados. Esto resolvió eficazmente el segundo problema, pero como seguía queriendo que mi proceso no fuera bloqueante para asegurarme de que, si nuestros queridos usuarios quisiesen cancelar el proceso o interactuar con cualquier otra parte de la aplicación mientras esperaban, pudiesen hacerlo. Una pequeña nota al margen: el procesamiento simultáneo en un entorno de navegador no es exactamente más rápido, pero la experiencia del usuario es absolutamente primordial para cualquiera que se considere un desarrollador web front-end, por lo que este paso era absolutamente necesario. Esto también facilitó la implementación de comprobaciones para saber si los datos estaban listos y la utilización de la API de promesas fue una integración natural para gestionar los MUCHOS casos de advertencias y errores que pueden surgir de este procesamiento de datos."
      },
      {
        "title": "El Resultado Final",
        "reference": {
          "url": "",
          "alt": "",
          "code": ""
        },
        "description": "Tras muchos ajustes y pruebas con usuarios, la aplicación finalmente se puso en producción. Resultó que esta aplicación web podía procesar en segundos lo que al programa anterior le llevaba muchos minutos, y lo que a los ingenieros les llevaba semanas calcular manualmente. Como mencioné previamente, no hice ningún tipo de algoritmo de optimización descabellado, sino que aproveché el tiempo entre la entrada de datos por parte del usuario y la interacción con el siguiente paso para avanzar el cálculo. Esto, sumado al motor altamente optimizado de los navegadores modernos, supuso un aumento significativo tanto en el rendimiento como en la experiencia del usuario. Ahora disponían de una interfaz visual intuitiva que se encargaba de todo el trabajo por ellos, ¡y lo único que tenían que hacer era arrastrar y soltar algunos archivos! El proyecto fue un éxito rotundo, y la siguiente vez que se recibieron las sanciones por los informes... bueno, no recibieron ninguna. ¡Pero eso es bueno! Significa que la entidad responsable de imponerles las sanciones no encontró nada que sancionar, lo que indica que todos los informes eran 100% precisos y que la sanción era de cero dólares. Hasta el día de hoy no he necesitado actualizar este proyecto y sigue utilizándose hoy en día, facilitando la vida de varios ingenieros."
      }
    ],
    "conclusion": "Mirando atrás, trabajar en este proyecto ha sido realmente increíble. He aprendido mucho sobre la gestión de errores, las operaciones asíncronas, cómo aprovechar la interacción del usuario para mejorar considerablemente el rendimiento, la gestión dinámica de claves de objetos y cómo trabajar con profesionales de un campo del que sé muy poco. Este es un ejemplo perfecto de por qué me encanta programar: tengo el poder de realmente cambiar vidas aprovechando uno de los mejores inventos de la humanidad: la computadora. Si has llegado hasta aquí, ¡muchas gracias por leer! Espero que te haya resultado entretenido y, tal vez, incluso educativo o motivador. ¡Nos vemos la próxima!"
  }
}
