{
  "title": "Energy App",
  "description": "This is a real world project I made for Edesur, which is an electricity provider in Argentina. This project was born because someone I know that works for the company had developed a software in order to make these calculations using Visual Basic, but for some reason couln't get it to run on their coworkers' computers. It was also quite slow at processing the data, taking up to half an hour at times. The need to distribute this software was imperative too, since the company had a whole department running these calculations the old fashioned way, and this led to a lot of human error and delayed informs, which would lead to literal millions of dollars in penalties. We talked about the project, and since the company PCs woulnd't let users install software, I had the idea of making a web app that could receive the data and process it! This would solve both issues at once, since a web app is easily accessible from any browser and I was better qualified for optimizing the logic of the data processing in order to make it efficient. After a bit over a month of working together with an electrical engineer on this project, we got it into production and the penalty for the next month (and every month since then so far) was exactly zero dollars! Check it out if you want to find out about the challenges I faced making this app.",
  "tags": ["Data Processing", "UX | UI", "Communication", "Problem Solving"],
  "year": 2024,
  "project": {
    "title": "Energy App",
    "sections": [
      {
        "title": "How It Came To Be",
        "reference": {
          "url": "/img/money-burning.gif",
          "alt": "an image of declining stock",
          "code": ""
        },
        "description": "This project was born from a very specific need as well as an existing solution for a particular problem. I was talking to my dad about how work had been on a particular night, and he went on to describe a very frustrating scenario: Millions of company dollars going down the drain because of very easily preventable penalties that kept stacking up. The main issue was that they weren't getting done on time, and what did get done was often times incorrect since it was prone to human error because the company had a team of around 5 people manually calculating everything. This would result in penalties spanning thousands of wrongly calculated badly delivered energy reports (we'll talk about what this means), and the punchline is that my dad had already thought of a software solution for this problem. He and one of the engineers doing the manual calculations managed to make a program using Widnows' Power BI and even got it working. This, however, wasn't as useful as you might initially think. You may ask: How is this not a solved problem if they have software that can perfectly calculate the reports? And I don't blame you for asking this. I did the same. It turns out, for reasons unknown to me because of company secrecy, the software couldn't be distributed to the PCs that had access to the files that needed to be processed (or at least they couldn't figure out how to). This was the problem that eventually became my largest client oriented project to date."
      },
      {
        "title": "Software Limitations",
        "reference": {
          "url": "/img/denied.webp",
          "alt": "an image that reads denied access",
          "code": ""
        },
        "description": "Because of what we just discussed, it was very unlikely that we could make some sort of console app to process the data since it'd be most likely not be allowed to be installed. This meant no console or desktop application could be considered as a viable means to solve this issue, so my mid immediately drifted to what was, at least to me, the elephant in the room: What about a web application? Did the computers have access to a browser? And the answer was yes! This meant we now had a medium with which we could process everything, however this did raise some initial concerns about security and company data being exposed. If you remember, the reason why we didn't know why the software couln't be spread was because of company secrecy. As it turns out though, there was no issue with the files from which the reports were calculated being exposed, and luckily for us this was all we needed! My dad set up a meeting, we settled a price and deadline, and I got to work."
      },
      {
        "title": "Simple But Useful",
        "reference": {
          "url": "/img/cpt-ss.webp",
          "alt": "an image of the project's user interface",
          "code": ""
        },
        "description": "While I did have graphic design and UX/UI subjects all along my career, I'm not the best at designing aesthetically pleasing User Interfaces from scratch. What I can do, however, is create effective ones. Looks are very important for a content oriented website, however what was expected from this project wasn't really a glimmering and shiny interface but rather a simple and tidy UI that would allow for data inputting and processed files downloading. This is definitely not getting sold for millions at an art exposition, but it has saved millions for this company! There's two main sections: One is for an expected excel file containing total energy registries across multiple .dat files, and the other one is for the .dat files that contain the detailed readings for the month about what the energy readings were every 45 minute interval since the devices that produces them were activated. In case of Monophasic calculations, you need both, and in case of Triphasic calculations, you only need the .dat files (there's a tab to toggle between them because the actual calculation is also different, so the correct approach was to have a separate screen for it). It's not much, but it's honest work!"
      },
      {
        "title": "Asynchronous Calculations and Object Iterations",
        "reference": {
          "url": "/img/cpt-vid.webp",
          "alt": "a short clip showing the interface working",
          "code": ""
        },
        "description": "I learned a lot about error handling, asynchronous operations, Javascript's file reader UI and edge case handling with this project. This was also my first time working with engineers outside of computer science fields, so that was also very exciting! Throughout a few meetings, I isolated what I needed to do in order to correctly process the files. You see, pretty much every program can be broken down into three main parts: What's expected to be received as an input, what your program is expected to output, and then that middle part is where you transform one into the other. E-commerces expect users to be able to input what they want to buy and where to deliver it to, social media expects its users to input content for it to deliver it to other users, and just like every other, this program also has a very specific set of possible inputs and their corresponding expected outputs. This means the first thing I needed to do was allow my users to upload files to their browser in order for the program to be able to handle the processing logic. Simple enough, add a box that allows users to upload files either by clicking or dragging and dropping on them. Next was figuring out how to reconcile two different format types, and the approach that I chose was, since I needed my program to read an excel file and was expected to output another once the processing was done, to just use the sheets.js library to read every file. This worked just fine, so I now had massive objects with tons of rows worth of data, some relevant but most not so much. This part is going to become a little bit technical, so be warned: The main issue was that every object has a set of dynamically generated keys that you need to use in order to access their hashed data, and every key was set to whatever the first value in the column was. This meant every file would have thousands of columns worth of data with no common pattern between files. Well, as far as object keys go at least. My saving grace was that there were some common patterns across every file: one line at the 5th row in every file that stated what every subsequent column represented. And luckily for me, this is all a programmer really needs. Once there is a common pattern across massive amounts of data, it becomes possible to, at least partially, automatically process it! Now that I had a static data value I knew to look out for, I can simply store the key to that column and use it dynamically in order to read every subsequent value. The next issue was, though, that this program also needed to be able to handle hundreds or possibly thousands of .dat files, and this can take a while. I'm not bringing this up because there's some magic trick I can do in order to make it happen immediately but to talk about User Experience. Javascript is synchronous by nature, so if you tell it to process a trillion number additions consecutively, that's exactly what it will do, but in doing so it won't let our users do anything else until that is done with. To add to this, the file reader interface also works asynchronously, so the file data wouldn't even be available if I tried to process it the instant the user clicked on the button to do so. To get around these issues, I made sure to implement pre-loading of the data the second my user uploads it to the browser, since even if my users were in a massive hurry, even the miliseconds it takes for your mouse to travel from the files box to the process data button is enough for a computer to get a LOT of work done. This effectively solved the second issue, but since I still wanted to make my process non-blocking to make sure that, should our beloved users want to cancel the processing or interact with any other part of the application while they wait, they can. Quick sidenote, but simultaneous processing in a browser environment isn't really faster, but user experience is absolutely paramount for anybody that thinks of themselves as a front end web developer so this step was absolutely necessary. This also made it easier to implement checks for knowing wether the data is ready, and utilize the promise API interface in order to handle the MANY warning and error cases that can come out of this data processing."
      },
      {
        "title": "The End Result",
        "reference": {
          "url": "",
          "alt": "",
          "code": ""
        },
        "description": "After a lot of fine-tuning and user testing, the application was finally put into production. As it turns out, this web application could process in seconds what would take many minutes for the previous program, and what would take weeks for the workers to manually calculate. As i mentioned earlier, I didn't really do any sort of crazy optimization math but rather take advantage of the time between user input and interaction with the next step to forward calculation. This, on top of modern browsers' highly optimized engine, made for a significant increase in both performance and user experience. They now had a friendly visual interface that would handle all of the work for them, and all they had to do was drag and drop some files! The project was a resounding success, and immediately the next time the report penalties came back... well, they didn't get any. This is not a bad thing though! It means the entity responsible for handing them the penalties found nothing to penalize, therefore indicating that every single report was 100% accurate and the penalty was zero dollars! I have yet to update this project at all and it's still being used to this day, making people's lives easier."
      }
    ],
    "conclusion": "Looking back, this project really was awesome to work on. I learned a lot about error handling, asynchronous operations, how taking advantage of user interaction can seriously improve performance, dynamic object key handling and how to work with professionals from a field i know very little about! This is a perfect example of why i love programming: I have the power to truly change lives by leveraging one of mankind's greatest invention: computers. If you made it this far, thanks a lot for reading! I really do hope you found it entertaining, and perhaps even educational or motivating. See you around!"
  }
}
